{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport log10 from '@stdlib/math-base-special-log10';\nimport ln from '@stdlib/math-base-special-ln';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport exponent from '@stdlib/number-float64-base-exponent';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number toward negative infinity with \\\\(N\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = floorsd( 3.141592653589793, 5 );\n* // returns 3.1415\n*\n* @example\n* var v = floorsd( 3.141592653589793, 1 );\n* // returns 3.0\n*\n* @example\n* var v = floorsd( 12368.0, 2 );\n* // returns 12000.0\n*\n* @example\n* var v = floorsd( 0.0313, 2, 2 );\n* // returns 0.03125\n*/\nfunction floorsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = floor( x * s ) / s;\n\t} else {\n\t\ty = floor( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default floorsd;\n"],"names":["floorsd","x","n","b","base","exp","s","y","isnan","isInfinite","NaN","arguments","length","log10","abs","exponent","ln","floor","pow"],"mappings":";;mxBA0DA,SAASA,EAASC,EAAGC,EAAGC,GACvB,IAAIC,EACAC,EACAC,EACAC,EACJ,GACCC,EAAOP,IACPO,EAAON,IACPA,EAAI,GACJO,EAAYP,GAEZ,OAAOQ,IAER,GAAKC,UAAUC,OAAS,EAAI,CAC3B,GACCJ,EAAOL,IACPA,GAAK,GACLM,EAAYN,GAEZ,OAAOO,IAERN,EAAOD,CACT,MACEC,EAAO,GAER,OAAKK,EAAYR,IAAa,IAANA,EAChBA,GAGPI,EADa,KAATD,EACES,EAAOC,EAAKb,IAEA,IAATG,EACHW,EAAUD,EAAKb,IAGfe,EAAIF,EAAIb,IAAOe,EAAIZ,GAE1BC,EAAMY,EAAOZ,EAAMH,EAAI,GACvBI,EAAIY,EAAKd,EAAMU,EAAKT,IAGfI,EAAYH,GACTL,GAIPM,EADIF,EAAM,EACNY,EAAOhB,EAAIK,GAAMA,EAEjBW,EAAOhB,EAAIK,GAAMA,EAGjBG,EAAYF,GACTN,EAEDM,GACR"}